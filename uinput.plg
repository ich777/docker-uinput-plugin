<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
  <!ENTITY name      "uinput">
  <!ENTITY author    "ich777">
  <!ENTITY version   "2022.01.14a">
  <!ENTITY gitURL    "https://github.com/&author;/unraid-&name;/raw/master">
  <!ENTITY pluginURL "&gitURL;/&name;.plg">
  <!ENTITY plugin    "/boot/config/plugins/&name;">
  <!ENTITY emhttp    "/usr/local/emhttp/plugins/&name;">
]>

<PLUGIN  name="&name;" author="&author;" version="&version;" pluginURL="&pluginURL;" min="6.9.2" icon="gamepad">

<CHANGES>

###2022.01.14a
- Initial release

###2022.01.14
- Initial prerelease for testing

</CHANGES>

<FILE Name="&emhttp;/README.md">
<INLINE>
**uinput**

This Plugin adds uinput to unRAID.

</INLINE>
</FILE>

<FILE Run="/bin/bash">
<INLINE>

KERNEL_V="$(uname -r)"
PACKAGE="uinput-plugin-${KERNEL_V}"
DL_URL="https://github.com/ich777/unraid-uinput/releases/download/$KERNEL_V"

#Wait for Network and timeout after 30 seconds
HOST="8.8.8.8"
for i in {1..10}; do
  ping -c1 $HOST &amp;> /dev/null &amp;&amp; break;
done

if [ ! -d "&plugin;/packages/${KERNEL_V%%-*}" ]; then
  mkdir -p "&plugin;/packages/${KERNEL_V%%-*}"
fi

#Check for old packages
rm -rf $(ls -d &plugin;/packages/* | grep -v "${KERNEL_V%%-*}")

download() {
#Download uinput package
if wget -q -nc --show-progress --progress=bar:force:noscroll -O "&plugin;/packages/${KERNEL_V%%-*}/${PACKAGE}-1.txz" "${DL_URL}/${PACKAGE}-1.txz" ; then
  if [ "$(md5sum "&plugin;/packages/${KERNEL_V%%-*}/${PACKAGE}-1.txz" | cut -d ' ' -f1)" != "$(wget -qO- "${DL_URL}/${PACKAGE}-1.txz.md5" | cut -d ' ' -f1)" ]; then
    if [ -d &plugin; ]; then
      rm -rf &plugin;
    fi
    echo
    echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR------"
    echo "--------------------------------CHECKSUM ERROR!---------------------------------"
    rm -rf &plugin;
    rm -rf &emhttp;
    exit 1
  fi
  echo
  echo "------------Successfully downloaded uinput package, please wait...!------------"
else
  echo
  echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR-----"
  echo "------------------------Can't download uinput package--------------------------"
  rm -rf &plugin;
  rm -rf &emhttp;
  exit 1
fi
}

check() {
if [ ! -f "&plugin;/packages/${KERNEL_V%%-*}/${PACKAGE}-1.txz" ]; then
  echo
  echo "+=============================================================================="
  echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
  echo "|"
  echo "| Don't close this window with the red 'X' in the top right corner until the 'DONE' button is displayed!"
  echo "|"
  echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
  echo "+=============================================================================="
  echo
  echo "-----------------Downloading uinput package, please wait...!-------------------"
  echo "-----------This could take some time, please don't close this window!----------"
  download
elif [ ! -s "&plugin;/packages/${KERNEL_V%%-*}/${PACKAGE}-1.txz" ]; then
  rm -rf &plugin;/packages/${KERNEL_V%%-*}/${PACKAGE}-1.txz
  echo
  echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR-----"
  echo "-----Download is empty please contact the developer of this plugin if the------"
  echo "-------plugin has been already built against the current Kernel version--------"
  rm -rf &plugin;
  rm -rf &emhttp;
  exit 1
else
  echo
  echo "------------------------uinput package found locally!--------------------------"
fi
}

install() {
#Install uinput package
/sbin/installpkg "&plugin;/packages/${KERNEL_V%%-*}/${PACKAGE}-1.txz" &amp;&amp; \
depmod -a &amp;&amp; \
modprobe uinput
}

#Check if Plugin Update Helper is downloaded and up-to-date
if [ ! -f &plugin;/plugin_update_helper ]; then
  wget -q -T 5 -O &plugin;/plugin_update_helper "https://raw.githubusercontent.com/ich777/unraid-plugin_update_helper/master/plugin_update_helper"
else
  CUR_V="$(grep -E "Plugin-Update-Helper version:" &plugin;/plugin_update_helper | awk '{print $4}')"
  if [ ! -s /tmp/update-helper ]; then
    echo "$(wget -T5 -qO- https://raw.githubusercontent.com/ich777/unraid-plugin_update_helper/master/plugin_update_helper | grep -E "Plugin-Update-Helper version:" | awk '{print $4}')" > /tmp/update-helper
    AVAIL_V="$(cat /tmp/update-helper)"
  else
    AVAIL_V="$(cat /tmp/update-helper)"
  fi
  if [ ! -z "$AVAIL_V" ]; then
    COMPARE="$(sort -V &lt;(echo -e "${AVAIL_V}\n$CUR_V") | tail -1)"
    if [ "$CUR_V" != "$COMPARE" ]; then
      wget -q -T 5 -O &plugin;/plugin_update_helper "https://raw.githubusercontent.com/ich777/unraid-plugin_update_helper/master/plugin_update_helper"
    fi
  fi
fi

#Check if Plugin Update Helper is installed and up to date
if [ ! -f /usr/bin/plugin_update_helper ]; then
  cp &plugin;/plugin_update_helper /usr/bin/plugin_update_helper
  chmod +x /usr/bin/plugin_update_helper
else
  PLUGIN_V="$(grep -E "Plugin-Update-Helper version:" &plugin;/plugin_update_helper | awk '{print $4}')"
  INST_V="$(grep -E "Plugin-Update-Helper version:" /usr/bin/plugin_update_helper | awk '{print $4}')"
  COMPARE="$(sort -V &lt;(echo -e "${PLUGIN_V}\n$INST_V") | tail -1)"
  if [ "$INST_V" != "$COMPARE" ]; then
    kill $(ps aux | grep -E "inotifywait -q /boot/changes.txt -e move_self,delete_self" | grep -v "grep -E inotifywait" | awk '{print $2}') 2>/dev/null
    sleep 1
    cp &plugin;/plugin_update_helper /usr/bin/plugin_update_helper
    chmod +x /usr/bin/plugin_update_helper
  fi
fi

#Start Plugin Update Helper
if [ -z "$(ps aux | grep -E "inotifywait -q /boot/changes.txt -e move_self,delete_self" | grep -v "grep -E inotifywait" | awk '{print $2}')" ]; then
  echo "/usr/bin/plugin_update_helper" | at now
fi

#Check if uinput package is allready downloaded and installed
check
if [ "$(modinfo uinput 2&gt;/dev/null)" ]; then
  echo
  echo "----------------------uinput module already installed...!----------------------"
  echo
else
  echo
  echo "-------------------Installing uinput module, please wait...!-------------------"
  install &gt;/dev/null
  echo
  echo "------------------Installation of uinput module successful---------------------"
  echo
fi

</INLINE>
</FILE>

<FILE Run="/bin/bash" Method="remove">
<INLINE>

echo "---------------------------------------"
echo "------Uninstalling uinput Plugin-------"
echo "---------------------------------------"
# Remove plugin related files
rm -rf &plugin;
rm -rf &emhttp;
echo
echo "----------------------------------------------------------------------------"
echo "----------uinput Plugin uninstalled, please reboot your server!-------------"
echo "----------------------------------------------------------------------------"
echo

</INLINE>
</FILE>
</PLUGIN>
